"""
Реализуйте класс Matrix. Он должен содержать:

    Конструктор от списка списков. Гарантируется, что списки состоят из чисел, не пусты и все имеют одинаковый размер. Конструктор должен копировать содержимое списка списков, т. е. при изменении списков, от которых была сконструирована матрица, содержимое матрицы изменяться не должно.

    Метод __str__, переводящий матрицу в строку. При этом элементы внутри одной строки должны быть разделены знаками табуляции, а строки — переносами строк. После каждой строки не должно быть символа табуляции и в конце не должно быть переноса строки.

    Метод size без аргументов, возвращающий кортеж вида (число строк, число столбцов). Пример теста с участием этого метода есть в следующей задаче этой недели.

Как сдавать задачи этой недели?
На проверку вы должны сдать только файл, содержащий описание класса и одну строку вне класса (в качестве основной программы):
exec(stdin.read())
И еще одну строку в начале файла:
from sys import stdin
Для тестирования класса вы можете вместо строки exec(stdin.read()) вставлять код из примеров или писать свой код.

Формат ввода
Вводится исходный код тестирующей программы на языке Python.

Формат вывода
Выведите результат её работы в текущем окружении при помощи exec, как это указано в условии.

Тест 1
Входные данные:
# Task 1 check 1
m = Matrix([[1, 0], [0, 1]])
print(m)
m = Matrix([[2, 0, 0], [0, 1, 10000]])
print(m)
m = Matrix([[-10, 20, 50, 2443], [-5235, 12, 4324, 4234]])
print(m)
Вывод программы:
1	0
0	1
2	0	0
0	1	10000
-10	20	50	2443
-5235	12	4324	4234

Тест 2
Входные данные:
# Task 1 check 2
m1 = Matrix([[1, 0, 0], [1, 1, 1], [0, 0, 0]])
m2 = Matrix([[1, 0, 0], [1, 1, 1], [0, 0, 0]])
print(str(m1) == str(m2))
Вывод программы:
True

Тест 3
Входные данные:
# Task 1 check 3
m = Matrix([[1, 1, 1], [0, 100, 10]])
print(str(m) == '1\t1\t1\n0\t100\t10')
Вывод программы:
True
"""
# 08.10.19
from sys import stdin
from copy import deepcopy


class Matrix:
    def __init__(self, matrix):
        self.matrix = deepcopy(matrix)

    def __str__(self):
        return '\n'.join(['\t'.join(map(str, list)) for list in self.matrix])

    def __add__(self, other):
        return Matrix()

    def size(self):
        return (len(self.matrix), len(self.matrix[0]))

    def __add__(self, other):
        return Matrix(list(map(
                        lambda x, y: list(map(lambda z, w: z + w, x, y)),
                        self.matrix, other.matrix)))

    def __mul__(self, other):
        return Matrix([[i * other for i in list] for list in self.matrix])

    __rmul__ = __mul__


exec(stdin.read())
